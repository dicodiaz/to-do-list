(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>i});var s=n(537),a=n.n(s),o=n(645),r=n.n(o)()(a());r.push([e.id,"input:focus {\n  outline: none;\n}\n\ni {\n  opacity: 0.5;\n  transition: opacity 0.2s ease-in-out;\n}\n\ni:hover {\n  opacity: 1;\n}\n\n#clear-all {\n  opacity: 0.5;\n}\n\n#clear-all:hover {\n  opacity: 1;\n  text-decoration: underline;\n}\n\n#clear-all:focus {\n  box-shadow: none;\n}\n\n.cursor-pointer {\n  cursor: pointer;\n}\n\n.cursor-move {\n  cursor: move;\n}\n\n.td-line-through {\n  text-decoration: line-through;\n}\n\n#warning {\n  transition: opacity 1s ease-in-out;\n}\n\n.table > :not(:last-child) > :last-child > * {\n  border-bottom-color: inherit;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,aAAa;AACf;;AAEA;EACE,YAAY;EACZ,oCAAoC;AACtC;;AAEA;EACE,UAAU;AACZ;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,UAAU;EACV,0BAA0B;AAC5B;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,6BAA6B;AAC/B;;AAEA;EACE,kCAAkC;AACpC;;AAEA;EACE,4BAA4B;AAC9B",sourcesContent:["input:focus {\n  outline: none;\n}\n\ni {\n  opacity: 0.5;\n  transition: opacity 0.2s ease-in-out;\n}\n\ni:hover {\n  opacity: 1;\n}\n\n#clear-all {\n  opacity: 0.5;\n}\n\n#clear-all:hover {\n  opacity: 1;\n  text-decoration: underline;\n}\n\n#clear-all:focus {\n  box-shadow: none;\n}\n\n.cursor-pointer {\n  cursor: pointer;\n}\n\n.cursor-move {\n  cursor: move;\n}\n\n.td-line-through {\n  text-decoration: line-through;\n}\n\n#warning {\n  transition: opacity 1s ease-in-out;\n}\n\n.table > :not(:last-child) > :last-child > * {\n  border-bottom-color: inherit;\n}\n"],sourceRoot:""}]);const i=r},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",s=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),s&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),s&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,s,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var r={};if(s)for(var i=0;i<this.length;i++){var c=this[i][0];null!=c&&(r[c]=!0)}for(var l=0;l<e.length;l++){var d=[].concat(e[l]);s&&r[d[0]]||(void 0!==o&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=o),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),a&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=a):d[4]="".concat(a)),t.push(d))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),o="/*# ".concat(a," */"),r=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(r).concat([o]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,s=0;s<t.length;s++)if(t[s].identifier===e){n=s;break}return n}function s(e,s){for(var o={},r=[],i=0;i<e.length;i++){var c=e[i],l=s.base?c[0]+s.base:c[0],d=o[l]||0,u="".concat(l," ").concat(d);o[l]=d+1;var p=n(u),h={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)t[p].references++,t[p].updater(h);else{var m=a(h,s);s.byIndex=i,t.splice(i,0,{identifier:u,updater:m,references:1})}r.push(u)}return r}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var o=s(e=e||[],a=a||{});return function(e){e=e||[];for(var r=0;r<o.length;r++){var i=n(o[r]);t[i].references--}for(var c=s(e,a),l=0;l<o.length;l++){var d=n(o[l]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}o=c}}},569:e=>{var t={};e.exports=function(e,n){var s=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var s="";n.supports&&(s+="@supports (".concat(n.supports,") {")),n.media&&(s+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(s+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),s+=n.css,a&&(s+="}"),n.media&&(s+="}"),n.supports&&(s+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(s+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(s,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(s){var a=t[s];if(void 0!==a)return a.exports;var o=t[s]={id:s,exports:{}};return e[s](o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var s in t)n.o(t,s)&&!n.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{const e=(e,t,n)=>{e.preventDefault();const s=((e,t)=>[...e.querySelectorAll(".draggable:not(.dragging)")].reduce(((e,n)=>{const s=n.getBoundingClientRect(),a=t-s.top-s.height/2;return a<0&&a>e.offset?{offset:a,element:n}:e}),{offset:Number.NEGATIVE_INFINITY}).element)(n,e.clientY||e.touches[0].clientY),a=document.querySelector(".dragging"),o=t.findIndex((e=>e.node===a));let r;s?(n.insertBefore(a,s),r=t.findIndex((e=>e.node===s))-1):(n.appendChild(a),r=t.length-1),o>r&&(r+=1),t[o].afterElementIndex=r};var t=n(379),s=n.n(t),a=n(795),o=n.n(a),r=n(569),i=n.n(r),c=n(565),l=n.n(c),d=n(216),u=n.n(d),p=n(589),h=n.n(p),m=n(426),v={};v.styleTagTransform=h(),v.setAttributes=l(),v.insert=i().bind(null,"head"),v.domAPI=o(),v.insertStyleElement=u(),s()(m.Z,v),m.Z&&m.Z.locals&&m.Z.locals;class f{constructor({description:e,completed:t=!1,index:n}){this.description=e,this.completed=t,this.index=n}}const A=document.querySelector("#to-do-list"),g=document.querySelector("#refresh"),E=document.getElementById("liveAlertPlaceholder"),y=document.querySelector("#add-task"),L=document.querySelector("#enter"),C=document.querySelector("#clear-all"),k=document.querySelector("#warning"),x=new class{constructor({tasks:e=[]}={}){this.tasks=e}saveLocalTasks(){return localStorage.setItem("tasks",JSON.stringify(this.tasks)),this}loadLocalTasks(){const e=JSON.parse(localStorage.getItem("tasks"));return e&&e.forEach(((e,t)=>{this.tasks[t]=new f(e)})),this}sortByIndex(){return this.tasks.sort(((e,t)=>e.index-t.index)),this}adjustIndexes(){return this.tasks.forEach(((e,t)=>{e.index=t+1})),this}add(e){return this.tasks.push(e),this.saveLocalTasks()}remove(e){return this.tasks=this.tasks.filter((t=>t!==e)),e.node.remove(),this.adjustIndexes().saveLocalTasks()}clearAllCompleted(){return this.tasks=this.tasks.filter((e=>(e.completed&&e.node.remove(),!e.completed))),this.adjustIndexes().saveLocalTasks()}move(e,t){return this.tasks.splice(t,0,this.tasks.splice(e,1)[0]),this}populateAll(e){return this.sortByIndex().tasks.forEach((t=>{this.populate(e,t)})),this}populate(e,t){const n=document.createElement("tr");n.classList.add("draggable"),n.draggable=!0;const s=document.createElement("td"),a=document.createElement("input");a.classList.add("form-check-input"),a.type="checkbox";const o=document.createElement("span");o.classList.add("ps-2"),o.innerText=t.description,s.appendChild(a),s.appendChild(o);const r=document.createElement("td");r.classList.add("align-middle","position-relative");const i=document.createElement("div");i.classList.add("d-flex","justify-content-end","pe-1");const c=document.createElement("i");c.classList.add("fas","fa-ellipsis-v"),c.alt="bot";const l=document.createElement("i");l.classList.add("far","fa-trash-alt","cursor-pointer","cursor-move","position-absolute","opacity-0"),l.alt="top",i.appendChild(c),i.appendChild(l),r.appendChild(i),n.appendChild(s),n.appendChild(r),e.appendChild(n),t.node=n,a.addEventListener("change",(()=>{a.checked?(t.completed=!0,o.classList.add("td-line-through"),s.classList.add("opacity-50")):(t.completed=!1,o.classList.remove("td-line-through"),s.classList.remove("opacity-50")),this.saveLocalTasks()})),t.completed&&(a.checked=!0,o.classList.add("td-line-through"),s.classList.add("opacity-50"));const d=document.createElement("input");return d.type="text",d.classList.add("border-0","ps-2","bg-secondary","text-white"),l.addEventListener("click",(()=>{l.classList.contains("cursor-move")?(c.classList.toggle("opacity-0"),l.classList.toggle("opacity-0"),l.classList.toggle("cursor-move"),n.classList.add("bg-secondary"),d.value=o.innerText,s.replaceChild(d,o),d.focus()):this.remove(t)})),d.addEventListener("blur",(()=>{setTimeout((()=>{o.innerText=d.value,s.replaceChild(o,d),c.classList.toggle("opacity-0"),l.classList.toggle("opacity-0"),l.classList.toggle("cursor-move"),n.classList.remove("bg-secondary"),t.description=d.value,this.saveLocalTasks()}),100)})),d.addEventListener("keyup",(e=>{13===e.keyCode&&d.blur()})),n.addEventListener("dragstart",(()=>{n.classList.add("dragging","bg-light")})),n.addEventListener("dragend",(()=>{n.classList.remove("dragging","bg-light");const e=this.tasks.findIndex((e=>e.node===n));e!==t.afterElementIndex&&this.move(e,t.afterElementIndex),this.adjustIndexes().saveLocalTasks()})),n.addEventListener("touchstart",(()=>{n.classList.add("dragging","bg-light")})),n.addEventListener("touchend",(()=>{n.classList.remove("dragging","bg-light");const e=this.tasks.findIndex((e=>e.node===n));e!==t.afterElementIndex&&this.move(e,t.afterElementIndex),this.adjustIndexes().saveLocalTasks()})),this.saveLocalTasks()}};window.onload=()=>{x.loadLocalTasks().populateAll(A),g.addEventListener("click",(()=>{if(""!==A.innerHTML)if(g.classList.contains("pressed-once"))g.classList.remove("pressed-once"),E.innerHTML="",A.innerHTML="",localStorage.clear();else{g.classList.add("pressed-once");const e="danger",t="Click again to clear all tasks.",n=document.createElement("div");n.innerHTML=`<div class="alert alert-${e} alert-dismissible" role="alert">${t}</div>`,E.append(n)}})),L.addEventListener("click",(()=>{if(y.value){const e=new f({description:y.value,index:x.tasks.length+1});x.add(e).populate(A,e),y.value=""}else k.classList.remove("d-none"),setTimeout((()=>k.classList.remove("opacity-0")),0),setTimeout((()=>k.classList.add("opacity-0")),2e3),setTimeout((()=>k.classList.add("d-none")),3e3)})),y.addEventListener("keyup",(e=>{13===e.keyCode&&L.click()})),C.addEventListener("click",(()=>{x.clearAllCompleted()})),A.addEventListener("dragover",(t=>{e(t,x.tasks,A)})),A.addEventListener("touchmove",(t=>{e(t,x.tasks,A)}))}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,